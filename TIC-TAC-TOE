import random

# Constants
PLAYER_A = 'A'
PLAYER_B = 'B'
EMPTY = ' '

class TicTacToe:
    def _init_(self):
        self.board = [[EMPTY for _ in range(3)] for _ in range(3)]
        self.current_player = PLAYER_A

    def print_board(self):
        for row in self.board:
            print("|".join(row))
            print("-" * 5)

    def is_winner(self, player):
        # Check rows, columns and diagonals
        for row in self.board:
            if all(s == player for s in row):
                return True
        for col in range(3):
            if all(self.board[row][col] == player for row in range(3)):
                return True
        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2 - i] == player for i in range(3)):
            return True
        return False

    def is_draw(self):
        return all(cell != EMPTY for row in self.board for cell in row)

    def available_moves(self):
        return [(r, c) for r in range(3) for c in range(3) if self.board[r][c] == EMPTY]

    def make_move(self, row, col, player):
        if self.board[row][col] == EMPTY:
            self.board[row][col] = player
            return True
        return False

    def minimax(self, depth, is_maximizing):
        if self.is_winner(PLAYER_B):
            return 1  # AI wins
        if self.is_winner(PLAYER_A):
            return -1  # Human wins
        if self.is_draw():
            return 0  # Draw

        if is_maximizing:
            best_score = float('-inf')
            for row, col in self.available_moves():
                self.make_move(row, col, PLAYER_B)
                score = self.minimax(depth + 1, False)
                self.board[row][col] = EMPTY  # Undo move
                best_score = max(best_score, score)
            return best_score
        else:
            best_score = float('inf')
            for row, col in self.available_moves():
                self.make_move(row, col, PLAYER_A)
                score = self.minimax(depth + 1, True)
                self.board[row][col] = EMPTY  # Undo move
                best_score = min(best_score, score)
            return best_score

    def best_move(self):
        best_score = float('-inf')
        move = None
        for row, col in self.available_moves():
            self.make_move(row, col, PLAYER_B)
            score = self.minimax(0, False)
            self.board[row][col] = EMPTY  # Undo move
            if score > best_score:
                best_score = score
                move = (row, col)
        return move

    def play(self):
        while True:
            self.print_board()
            if self.current_player == PLAYER_A:
                row, col = map(int, input("Enter your move (row and column): ").split())
                if not self.make_move(row, col, PLAYER_A):
                    print("Invalid move. Try again.")
                    continue
            else:
                print("AI is making a move...")
                row, col = self.best_move()
                self.make_move(row, col, PLAYER_B)

            if self.is_winner(self.current_player):
                self.print_board()
                if self.current_player == PLAYER_A:
                    print("You win!")
                else:
                    print("AI wins!")
                break
            if self.is_draw():
                self.print_board()
                print("It's a draw!")
                break

            self.current_player = PLAYER_A if self.current_player == PLAYER_B else PLAYER_B


if _name_ == "_main_":
    game = TicTacToe()
